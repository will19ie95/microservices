user www-data;
worker_processes  auto;  ## Default: 1
pid /run/nginx.pid;
error_log  /var/log/nginx/error.log;

events {
  worker_connections  1024;
  use                 epoll;
  multi_accept        on;
 }

http {

  # Basic Settings 
  charset uft-8;
  sendfile on;

  # Timeout Settings
  client_body_timeout 12;
  client_header_timeout 12;
  keepalive_timeout 20;
  send_timeout 10;

  add_header X-Frame-Options SAMEORIGIN;

  default_type application/octet-stream;
  log_format   main '$remote_addr - $remote_user [$time_local]  $status '
    '"$request" $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

  root  /var/www/html;
  index index.html;
  access_log /var/log/nginx/access.log main;

  # microservices
  upstream user_service {
    # ip_hash;
    # load balance based on connections
    # server 192.168.1.9:3000 max_fails=2 fail_timeout=10s;
    server 127.0.0.1:3000 max_fails=2 fail_timeout=10s;
    server 127.0.0.1:3001 max_fails=2 fail_timeout=10s;

    keepalive 8;
  }

  upstream item_service {
    # ip_hash;
    # load balance based on connections
    # amqp client workloads
    least_conn;
    server 127.0.0.1:3000 max_fails=2 fail_timeout=10s;
    server 127.0.0.1:3001 max_fails=2 fail_timeout=10s;

    server 192.168.1.40:3000 max_fails=2 fail_timeout=10s;
    server 192.168.1.41:3000 max_fails=2 fail_timeout=10s;
    server 192.168.1.42:3000 max_fails=2 fail_timeout=10s;
    server 192.168.1.43:3000 max_fails=2 fail_timeout=10s;

    # Elastic search server 
    # server 192.168.1.44:3000 max_fails=2 fail_timeout=10s;
    # user service running item service also

    # nginx running item service also
    # server 192.168.1.11:3000 max_fails=3 fail_timeout=10s; # Turn into Elastic Search
    # server 192.168.1.12:3000 max_fails=3 fail_timeout=10s; # Turn into Elastic Search

    # brolic large twitter
    # Handles the amqp server workloads, no need to call. reads from queue
    # server 192.168.1.9:3001 max_fails=3 fail_timeout=10s;
    keepalive 8;
  }

  upstream media_service {
    # ip_hash;
    # load balance based on connections
    least_conn;
    server 127.0.0.1:3000 max_fails=2 fail_timeout=10s;
    server 127.0.0.1:3001 max_fails=2 fail_timeout=10s;

    server 192.168.1.40:3000 max_fails=2 fail_timeout=10s;
    server 192.168.1.41:3000 max_fails=2 fail_timeout=10s;
    server 192.168.1.42:3000 max_fails=2 fail_timeout=10s;
    server 192.168.1.43:3000 max_fails=2 fail_timeout=10s;


    keepalive 8;
  }

  server { # simple reverse-proxy

    include    /etc/nginx/mime.types;
    include    /etc/nginx/proxy.conf;

    listen 80 default_server;
    listen [::]:80 default_server ipv6only=on;
    server_name yolei.cse356.compas.cs.stonybrook.edu;



    location / {
      if ($request_method != GET) {                                  
            return 403;
      }
      
      root            /var/www/angular/dist;
      try_files $uri $uri/ /index.html;
      error_page  405     =200 $uri;
      error_page  403     =200 $uri;
      proxy_pass      http://127.0.0.1:3000/; # proxy to angular app

      error_log /var/log/nginx/angular4.error.log;
		  access_log /var/log/nginx/angular4.access.log;
    }

    location /stub_status {
      stub_status;
      # Security: Only allow access from the IP below.
      allow 127.0.0.1;
      # Deny anyone else
      deny all;
      # dont log this
      access_log  off;
      error_log off;
    }

    # USER Microservice
    # multiple location match with regex for each
    location ~ ^/(user|follow|adduser|verify|login|logout) {
      root            /var/www/user_service/html;
      error_log       /var/log/nginx/user.error.log;
      access_log      /var/log/nginx/user.access.log main;
      # proxy settings
      proxy_pass      http://user_service;
    }

    # # ITEM Microservice
    location ~ ^/(item|search|additem) {
      root            /var/www/item_service/html;
      error_log       /var/log/nginx/item.error.log;
      access_log      /var/log/nginx/item.access.log main;
      # proxy settings
      proxy_pass      http://item_service;
      
    }

    # MEDIA Microservice
    location ~ ^/(addmedia|media) {
      root            /var/www/media_service/html;
      error_log       /var/log/nginx/media.error.log;
      access_log      /var/log/nginx/media.access.log main;
      # proxy settings
      proxy_pass      http://media_service;
    }

  }

}